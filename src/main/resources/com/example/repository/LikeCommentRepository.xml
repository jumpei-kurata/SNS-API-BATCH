<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.repository.LikeCommentRepository">

	<resultMap id="LikeCommentMap" type="com.example.domain.LikeComment">
		<id			property="id"					column="like_comment_id"></id>
		<result 	property="userId"				column="user_fk" ></result>
		<result 	property="accountName"			column="account_name" ></result>
		<result 	property="userPhotoPath"		column="user_photo_path" ></result>
		<result 	property="timelineId"			column="timeline_fk" ></result>
		<result 	property="parentCommentId"		column="like_comment_fk1" ></result>
		<result 	property="isLike"				column="is_like" ></result>
		<result 	property="comment"				column="comment" ></result>
		<result 	property="commentLikeCount"		column="comment_like_count" ></result>
		<result 	property="actionedTime"			column="actioned_time" ></result>
		<result 	property="hasNoticed"			column="has_noticed" ></result>
		<result 	property="isRead"				column="is_read" ></result>
		<result 	property="isMyLike"				column="is_my_like" ></result>		
		<result 	property="commentDeleted"		column="lc.comment_deleted"></result>
	</resultMap>

	<select id="findLikeCommentByUserIdAndTimelineId" resultMap="LikeCommentMap">
		SELECT 
		* 
		FROM 
		(SELECT * FROM like_comments WHERE user_fk = #{userId}) AS lc 
		JOIN 
		links_to_timeline AS ltt 
		ON 
		lc.like_comment_id = ltt.like_comment_fk
		WHERE 
		ltt.timeline_fk = #{timelineId}
	</select>
	
	<select id="findLikeCommentByUserIdAndParentCommentId" resultMap="LikeCommentMap">
		SELECT 
		lc.like_comment_id , 
		lc.user_fk , 
		ltc.like_comment_fk1 ,
		lc.is_like ,
		lc.comment ,
		lc.comment_like_count ,
		lc.actioned_time ,
		lc.has_noticed ,
		lc.is_read ,
		(CASE WHEN ltc.link_to_like_comment_id is null  THEN false 
		ELSE true END) AS is_my_like, 
		lc.comment_deleted
		FROM 
		(SELECT * FROM like_comments WHERE user_fk = #{userId}) AS lc
		JOIN 
		links_to_like_comment AS ltc
		ON 
		ltc.like_comment_fk2 = lc.like_comment_id
		WHERE 
		like_comment_fk1 = #{parentCommentId}
	</select>
	<select id="findCommentListByTimelineId" resultMap="LikeCommentMap">
		SELECT 
		lc.like_comment_id , 
		lc.user_fk , 
		u.account_name , 
		u.user_photo_path , 
		ltt.timeline_fk ,
		lc.is_like ,
		lc.comment ,
		lc.comment_like_count ,
		lc.actioned_time ,
		lc.has_noticed ,
		lc.is_read ,
		(CASE WHEN joinedltlc.like_comment_id is null THEN false 
		ELSE true END) AS is_my_like, 
		lc.comment_deleted
		FROM 
		like_comments AS lc
		JOIN 
	 	links_to_timeline  AS ltt 
		ON 
		ltt.like_comment_fk = lc.like_comment_id 
		LEFT JOIN 
		users AS u 
		ON 
		lc.user_fk = u.user_id 
		LEFT JOIN 
		(SELECT * FROM
		links_to_like_comment AS ltlc 
		LEFT JOIN 
		like_comments AS lc2
		ON 
		ltlc.like_comment_fk2 = lc2.like_comment_id 
		WHERE user_fk = #{userId} AND is_like = TRUE ) AS joinedltlc
		ON 
		lc.like_comment_id = joinedltlc.like_comment_fk1
		WHERE 
		ltt.timeline_fk = #{id} 
		AND lc.comment IS NOT NULL
		AND lc.comment_deleted = false 
		ORDER BY lc.like_comment_id ASC
	</select>
<!-- 	一応大友さんが書いたコードも残しておきます -->
<!-- 	<select id="findCommentListByTimelineId" resultMap="LikeCommentMap"> -->
<!-- 		SELECT  -->
<!-- 		lc.like_comment_id ,  -->
<!-- 		lc.user_fk ,  -->
<!-- 		u.account_name ,  -->
<!-- 		u.user_photo_path ,  -->
<!-- 		ltt.timeline_fk , -->
<!-- 		lc.is_like , -->
<!-- 		lc.comment , -->
<!-- 		lc.comment_like_count , -->
<!-- 		lc.actioned_time , -->
<!-- 		lc.has_noticed , -->
<!-- 		lc.is_read , -->
<!-- 		(CASE WHEN lc2.like_comment_id is null THEN false  -->
<!-- 		ELSE true END) AS is_my_like,  -->
<!-- 		lc.comment_deleted -->
<!-- 		FROM  -->
<!-- 		(SELECT * FROM links_to_timeline WHERE timeline_fk = #{id}) AS ltt  -->
<!-- 		JOIN  -->
<!-- 		like_comments AS lc  -->
<!-- 		ON  -->
<!-- 		ltt.like_comment_fk = lc.like_comment_id  -->
<!-- 		JOIN  -->
<!-- 		users AS u  -->
<!-- 		ON  -->
<!-- 		lc.user_fk = u.user_id  -->
<!-- 		LEFT JOIN  -->
<!-- 		links_to_like_comment AS ltlc  -->
<!-- 		ON  -->
<!-- 		lc.like_comment_id = ltlc.like_comment_fk1  -->
<!-- 		LEFT JOIN  -->
<!-- 		(SELECT * FROM like_comments WHERE user_fk = #{userId} AND is_like = true ) AS lc2 -->
<!-- 		ON  -->
<!-- 		ltlc.like_comment_fk2 = lc2.like_comment_id  -->
<!-- 		WHERE  -->
<!-- 		lc.comment IS NOT NULL -->
<!-- 	</select> -->
	
	<insert id="insertLike" useGeneratedKeys="true" keyProperty="id" >
		INSERT INTO like_comments 
		(user_fk , is_like) 
		VALUES 
		(#{userId} , #{isLike});
		<selectKey resultType="int" keyProperty="id" order="AFTER">
      		select @@IDENTITY
	    </selectKey>
	</insert>
	
	<insert id="insertComment" useGeneratedKeys="true" keyProperty="id" >
		INSERT INTO like_comments 
		(user_fk , comment ) 
		VALUES 
		(#{userId} , #{comment});
		<selectKey resultType="int" keyProperty="id" order="AFTER">
      		select @@IDENTITY
	    </selectKey>
	</insert>
	
	<update id="updateLike">
		UPDATE 
		like_comments 
		<set>
			<if test="isLike == true">is_like = false</if>
			<if test="isLike == false">is_like = true</if>
		</set>
		WHERE 
		like_comment_id = #{id}
	</update>
	<update id="updateComment">
		UPDATE 
		like_comments 
		SET 
		comment = #{comment} 
		WHERE 
		like_comment_id = #{id}
	</update>
	<update id="updateDelete">
		UPDATE 
		like_comments 
		SET 
		comment_deleted = true 
		WHERE 
		like_comment_id = #{id}
	</update>
	<update id="updateLikeCount">
		UPDATE 
		like_comments  
		<set>
			<if test="status == 0">
				comment_like_count = comment_like_count + 1 
			</if>
			<if test="status == 1">
				comment_like_count = comment_like_count - 1 
			</if>
		</set>
		WHERE 
		like_comment_id = #{id}
	</update>
	<select id="findLikeCommentByCommentId" resultMap="LikeCommentMap">
		SELECT 
		* 
		FROM 
		like_comments 
		WHERE 
		like_comment_id = #{id}
	</select>
</mapper>