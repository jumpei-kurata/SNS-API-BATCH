<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.repository.ReviewRepository">
	<resultMap id="reviewMap" type="com.example.domain.Review">
		<id			property="id"					column="review_id" ></id>
		<result 	property="userId"				column="user_fk" ></result>
		<result 	property="accountName"			column="account_name" ></result>
		<result 	property="userPhotoPath"		column="user_photo_path" ></result>
		<result 	property="restaurantId"			column="restaurant_fk" ></result>
		<result 	property="restaurantName"		column="restaurant_name" ></result>
		<result 	property="restaurantPhotoPath"	column="restaurant_photo_path" ></result>
		<result 	property="star"					column="review_star" ></result>
		<result 	property="sentence"				column="review_sentence" ></result>
		<result 	property="likeCount"			column="review_like_count" ></result>
		<result 	property="commentCount"			column="review_comment_count" ></result>
		<result 	property="postedTime"			column="review_posted_time" ></result>
		<result 	property="isMyLike"				column="is_my_like" />
		<result 	property="deleted"				column="deleted" />
	</resultMap>
	<select id="findAllReview" resultMap="reviewMap">
		SELECT 
		rv.review_id , 
		rv.user_fk , 
		u.account_name , 
		u.user_photo_path ,
		rv.restaurant_fk,
		rst.restaurant_name,
		rst.restaurant_photo_path,
		rv.review_star , 
		rv.review_sentence ,
		rv.review_like_count , 
		rv.review_comment_count, 
		rv.review_posted_time ,
		(CASE WHEN lc.like_comment_id is null THEN false 
		ELSE true END) AS is_my_like, 
		rv.deleted AS deleted
		FROM 
		reviews AS rv
		LEFT JOIN
		(
		(SELECT like_comment_id FROM like_comments  
		WHERE user_fk = #{userId} AND is_like = true ) AS lc
		LEFT JOIN links_to_review AS ltr
		ON lc.like_comment_id = ltr.like_comment_fk 
		)
		ON rv.review_id = ltr.review_fk 
		LEFT JOIN 
		users AS u 
		ON 
		rv.user_fk = u.user_id 
		LEFT JOIN 
		restaurants AS rst
		ON 
		rv.restaurant_fk = rst.restaurant_id
		WHERE 
		rv.deleted = false
		ORDER BY rv.review_id DESC LIMIT 50
	</select>
	<select id="findAllReviewOld" resultMap="reviewMap">
		SELECT 
		rv.review_id , 
		rv.user_fk , 
		u.account_name , 
		u.user_photo_path ,
		rv.restaurant_fk,
		rst.restaurant_name,
		rst.restaurant_photo_path,
		rv.review_star , 
		rv.review_sentence ,
		rv.review_like_count , 
		rv.review_comment_count, 
		rv.review_posted_time ,
		(CASE WHEN lc.like_comment_id is null THEN false 
		ELSE true END) AS is_my_like, 
		rv.deleted AS deleted
		FROM 
		reviews AS rv 
		LEFT JOIN
		(
		(SELECT like_comment_id FROM like_comments  
		WHERE user_fk = #{userId} AND is_like = true ) AS lc
		LEFT JOIN links_to_review AS ltr
		ON lc.like_comment_id = ltr.like_comment_fk 
		)
		ON rv.review_id = ltr.review_fk 
		LEFT JOIN 
		users AS u 
		ON 
		rv.user_fk = u.user_id 
		LEFT JOIN 
		restaurants AS rst
		ON 
		rv.restaurant_fk = rst.restaurant_id
		WHERE 
		rv.deleted = false
		AND 
		#{id} > review_id 
		ORDER BY rv.review_id DESC 
		LIMIT 50
	</select>
	<select id="findByRestaurantId" resultMap="reviewMap">
		SELECT 
		rv.review_id , 
		rv.user_fk , 
		u.account_name , 
		u.user_photo_path ,
		rv.restaurant_fk,
		rst.restaurant_name,
		rst.restaurant_photo_path,
		rv.review_star , 
		rv.review_sentence ,
		rv.review_like_count , 
		rv.review_comment_count, 
		rv.review_posted_time ,
		(CASE WHEN lc.like_comment_id is null THEN false 
		ELSE true END) AS is_my_like, 
		rv.deleted AS deleted
		FROM 
		(SELECT * FROM reviews WHERE restaurant_fk = #{restaurantId}) AS rv
		LEFT JOIN
		(
		(SELECT like_comment_id FROM like_comments  
		WHERE user_fk = #{userId} AND is_like = true ) AS lc
		LEFT JOIN links_to_review AS ltr
		ON lc.like_comment_id = ltr.like_comment_fk 
		)
		ON rv.review_id = ltr.review_fk 
		LEFT JOIN 
		users AS u 
		ON 
		rv.user_fk = u.user_id 
		LEFT JOIN 
		restaurants AS rst
		ON 
		rv.restaurant_fk = rst.restaurant_id
		WHERE 
		rv.deleted = false
		ORDER BY rv.review_id DESC LIMIT 50
	</select>
	<select id="findById" resultMap="reviewMap">
		SELECT 
		rv.review_id , 
		rv.user_fk , 
		u.account_name , 
		u.user_photo_path ,
		rv.restaurant_fk,
		rst.restaurant_name,
		rst.restaurant_photo_path,
		rv.review_star , 
		rv.review_sentence , 
		rv.review_like_count , 
		rv.review_comment_count, 
		rv.review_posted_time ,
		(CASE WHEN lc.like_comment_id is null  THEN false 
		ELSE true END) AS is_my_like, 
		rv.deleted AS deleted
		FROM 
		(SELECT * from reviews WHERE review_id = #{id} AND deleted = false ) AS rv
		LEFT JOIN
		(
		(SELECT like_comment_id FROM like_comments  
		WHERE user_fk = #{userId} AND is_like = true ) AS lc
		LEFT JOIN links_to_review AS lrv
		ON lc.like_comment_id = lrv.like_comment_fk 
		)
		ON rv.review_id = lrv.review_fk 
		LEFT JOIN 
		users AS u 
		ON 
		rv.user_fk = u.user_id 
		LEFT JOIN 
		restaurants AS rst
		ON 
		rv.restaurant_fk = rst.restaurant_id
	</select>
	<insert id="insertReview" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO reviews  (`user_fk`, `restaurant_fk`, `review_star`, `review_sentence`) 
		VALUES (#{userId},#{restaurantId},#{star},#{sentence})
		<selectKey resultType="int" keyProperty="id" order="AFTER">
      		select @@IDENTITY
	    </selectKey>
	</insert>
	<update id="deleteReview">
		UPDATE 
		reviews 
		SET 
		deleted = true 
		WHERE 
		review_id = #{id}
	</update>
	<update id="updateLikeCount">
		UPDATE 
		reviews 
		<set>
			<if test="status == 0">
				review_like_count = review_like_count + 1 
			</if>
			<if test="status == 1">
				review_like_count = review_like_count - 1 
			</if>
		</set>
		WHERE 
		review_id = #{id}
	</update>
	<update id="updateCommentCount">
		UPDATE 
		reviews 
		<set>
			<if test="status == 0">
				review_comment_count = review_comment_count + 1 
			</if>
			<if test="status == 1">
				review_comment_count = review_comment_count - 1 
			</if>
		</set>
		WHERE 
		review_id = #{id}
	</update>
</mapper>